<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_183199_testcommv.TestCommvaultEndpoint</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>TestCommvaultEndpoint</name>
        <script><![CDATA[var TestCommvaultEndpoint = Class.create();
TestCommvaultEndpoint.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	getHello: function() {
		
		this._getToken();
		
		return "";
	},
	getVMList: function() {
		var token = this._getToken();
		
		gs.info('Getting schedules using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/VM?forUser=true&status=0");
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setRequestHeader("sortingInfo", "asc:2");
		sm.setRequestHeader("pagingInfo", "0,10000");
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getDataForDataset: function() {
		var token = this._getToken();
		var dataSetId = this.getParameter('sysparm_dataSetId');
		gs.info('Getting Data for Dataset ' + dataSetId + ' using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint('http://winproxy1.commvault.com:9001/CustomReportsEngine/rest/reportsplusengine/datasets/' + dataSetId + '/data');
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getSLAReport: function() {
		var token = this._getToken();
		
		gs.info('Getting SLA Reports using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/CustomReportsEngine/rest/reportsplusengine/reports/name:Servers%20SLA?includeDrafts=false&version=0");
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getSchedules: function() {
		var token = this._getToken();
		
		gs.info('Getting schedules using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/SchedulePolicy");
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
		
	},
	getClients: function() {
		var token = this._getToken();
		
		gs.info('Getting clients using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/Client?propertylevel=10&Hiddenclients=false&includevm=true");
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setRequestHeader("mode", "EdgeMode");
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getSubclients: function() {
		var token = this._getToken();
		var clientId = this.getParameter('sysparm_clientId');
		
		gs.info('Getting clients using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/client/" + clientId + "/Hierarchy?backedUp=false");
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
	
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getClientProperties: function() {
		var token = this._getToken();
		var clientId = this.getParameter('sysparm_clientId');
		
		gs.info('Getting clients using token ' + token);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/client/" + clientId);
		sm.setHttpMethod("get");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		var response = sm.execute();
		var responseBody = response.getBody();
	
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	runBackup: function() {
		var token = this._getToken();
		
		var clientId = this.getParameter('sysparm_clientId');
		var clientName = this.getParameter('sysparm_clientName');
		var subclientId = this.getParameter('sysparm_subclientId');
		var subclientName = this.getParameter('sysparm_subclientName');
		var backupsetId = this.getParameter('sysparm_backupsetId');
		var backupsetName = this.getParameter('sysparm_backupsetName');
		var appId = this.getParameter('sysparm_appId');
		var appName = this.getParameter('sysparm_appName');
		var backupLevel = this.getParameter('sysparm_backupLevel');
		
		var entityType = "SUBCLIENT_ENTITY";
		
		var body = '<TMMsg_CreateTaskReq><taskInfo><task taskType="IMMEDIATE"/><associations subclientId="' + subclientId + '" applicationId="' + appId + '" backupsetId="' + backupsetId + '" clientId="' + clientId + '" subclientName="' + subclientName + '" backupsetName="' + backupsetName + '" _type_="' + entityType + '" appName="' + appName + '"/><subTasks><subTask subTaskType="2" operationType="2"/><options><backupOpts backupLevel="' + backupLevel + '"/></options></subTasks></taskInfo></TMMsg_CreateTaskReq>';
		
		gs.info('Sending backup request' + body);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/CreateTask");
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	runBackupVm: function() {
		var token = this._getToken();
		
		var subclientId = this.getParameter('sysparm_subclientId');
		var backupLevel = this.getParameter('sysparm_backupLevel');
		var vmGuid = this.getParameter('sysparm_vmGuid');
				
		var body = '<TMMsg_CreateTaskReq><taskInfo><task taskType="IMMEDIATE"/><associations subclientId="' + subclientId + '" _type_="3"/><subTasks><subTask subTaskType="2" operationType="2"/><options><backupOpts backupLevel="' + backupLevel + '"><vsaBackupOptions><selectiveVMInfo vmGuid="' + vmGuid + '"/></vsaBackupOptions></backupOpts></options></subTasks></taskInfo></TMMsg_CreateTaskReq>';
		
		gs.info('Sending backup request' + body);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/CreateTask");
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	setActivityControl: function() {
		var token = this._getToken();
		
		var clientId = this.getParameter('sysparm_clientId');
		var activityType = this.getParameter('sysparm_activityType');
		var enableActivityType = this.getParameter('sysparm_enableActivityType');
		
		var body = '<App_SetClientPropertiesRequest><clientProperties><clientProps><clientActivityControl><activityControlOptions activityType="' + activityType + '" enableActivityType="' + enableActivityType + '"/></clientActivityControl></clientProps></clientProperties></App_SetClientPropertiesRequest>';
		
		gs.info('Sending backup request' + body);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/client/" + clientId);
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	getJobs: function() {
		var token = this._getToken();
		
		var category = this.getParameter('sysparm_category');
		var sortField = this.getParameter('sysparm_sortField');
		var sortDirection = this.getParameter('sysparm_sortDirection');
		var offset = this.getParameter('sysparm_offset');
		var limit = this.getParameter('sysparm_limit');
		var completedJobLookupTime = this.getParameter('sysparm_completedJobLookupTime');
		
		gs.info('sortDirection:' + sortDirection);
		
		if(!sortField) {
			sortField = 'jobStartTime';
		}
		if(!completedJobLookupTime) {
			completedJobLookupTime = 7776000;
		}
		
		var body = '<JobManager_JobListRequest scope="1" category="' + category + '"><pagingConfig sortField="' + sortField + '" sortDirection="' + sortDirection + '" offset="' + offset + '" limit="' + limit + '"/><jobFilter completedJobLookupTime="' + completedJobLookupTime + '" showAgedJobs="0"/></JobManager_JobListRequest>';
		
		gs.info('Sending view jobs request' + body);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/jobs");
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	runFullVmRestore: function() {
		var token = this._getToken();
		
		var newName = this.getParameter('sysparm_newName');
		var unconditionalOverwrite = this.getParameter('sysparm_unconditionalOverwrite');
		var powerOnVmAfterRestore = this.getParameter('sysparm_powerOnVmAfterRestore');
		var destClientId = this.getParameter('sysparm_destClientId');
		var destClientName = this.getParameter('sysparm_destClientName');
		var subclientId = this.getParameter('sysparm_subclientId');
		var vmGuid = this.getParameter('sysparm_vmGuid');
		var vmName = this.getParameter('sysparm_vmName');

				
		var body = '<TMMsg_CreateTaskReq><taskInfo><task policyType="0" taskType="1"/><associations subclientId="' + subclientId + '" applicationId="106" _type_="3"/><subTasks><subTask subTaskType="3" operationType="1001" /><options><restoreOptions restoreACLsType="3"><destination inPlace="1" isLegalHold="0"><destClient clientId="' + destClientId + '" clientName="' + destClientName + '" /></destination><volumeRstOption volumeLeveRestore="0" volumeLevelRestoreType="1"/><virtualServerRstOption isDiskBrowse="1" viewType="0"><diskLevelVMRestoreOption powerOnVmAfterRestore="' + powerOnVmAfterRestore + '" passUnconditionalOverride="' + unconditionalOverwrite + '" transportMode="0" useVcloudCredentials="1" restoreToDefaultHost="0"><advancedRestoreOptions guid="' + vmGuid + '" name="' + vmName + '" newName="' + newName + '" addToFailoverCluster="0"></advancedRestoreOptions></diskLevelVMRestoreOption></virtualServerRstOption><commonOptions overwriteFiles="' + unconditionalOverwrite + '" detectRegularExpression="1" unconditionalOverwrite="' + unconditionalOverwrite + '" stripLevelType="0" preserveLevel="1" stripLevel="0" restoreACLs="1" isFromBrowseBackup="1" clusterDBBackedup="0" /></restoreOptions></options></subTasks></taskInfo></TMMsg_CreateTaskReq>';
		
		gs.info('Sending full vm restore request');
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/CreateTask");
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setRequestHeader("Authtoken", token);
		sm.setLogLevel("all");
		
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info('Returning response' + responseBody);
		
		return responseBody;
	},
	_getToken: function() {
		gs.info("Getting token");
		
		var username = 'admin';
		var password = '';
		
		var ePassword = gs.base64Encode(password);
		
		var sm = new sn_ws.RESTMessageV2();
		sm.setEndpoint("http://winproxy1.commvault.com:9001/webconsole/RestServlet/Login");
		sm.setHttpMethod("post");
		sm.setHttpTimeout(80000);
		sm.setRequestHeader("Accept","application/json");
		sm.setRequestHeader("Content-Type","application/xml");
		sm.setLogLevel("all");
		
		var body = '<DM2ContentIndexing_CheckCredentialReq mode="Webconsole" username="' + username + '" password="' + ePassword + '" />';
		sm.setRequestBody(body);
		
		var response = sm.execute();
		var responseBody = response.getBody();
		
		gs.info("Response from get token: " + responseBody);
		
		gs.info('Parsing response');
		
		var responseJson = JSON.parse(responseBody);
		
		gs.info('Response json: ' + responseJson);
		
		gs.info("Token is " + responseJson['token']);
		
		if(responseJson['token']) {
			return responseJson['token'];
		} else {
			return "";
		}
		
	},
    type: 'TestCommvaultEndpoint'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-26 12:20:08</sys_created_on>
        <sys_id>a1c8f345db530300180ad170cf96191c</sys_id>
        <sys_mod_count>70</sys_mod_count>
        <sys_name>TestCommvaultEndpoint</sys_name>
        <sys_package display_value="TestCommvault" source="x_183199_testcommv">3aafe741db130300180ad170cf961919</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TestCommvault">3aafe741db130300180ad170cf961919</sys_scope>
        <sys_update_name>sys_script_include_a1c8f345db530300180ad170cf96191c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-16 12:09:46</sys_updated_on>
    </sys_script_include>
</record_update>
