<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Client-side logic for Angular App</description>
        <global>false</global>
        <name>x_183199_testcommv.angular_app_client_lo</name>
        <script><![CDATA[(function () {
    angular.module('angularapp', ['highcharts-ng', 'angularUtils.directives.dirPagination', 'toaster', 'ngAnimate', 'ngSanitize', 'ngCookies', 'isteven-multi-select']);

    angular.module('angularapp').filter('capacity', function () {
        var format = function (number, unit) {
            if (number.toFixed(2) == Math.floor(number.toFixed(2))) {
                return Math.floor(number.toFixed(2)) + unit; //in case of 3.999 .toFixed(2) makes it 4.00 - so important to retain .toFixed
            }
            return number.toFixed(2) + unit;
        };
        return function (x) {
            var value = Number(x);
            if (isNaN(value)) {
                return x;
            }
            if (value <= 1024) {
                return format(value, ' ' + 'Bytes');
            }
            value = value / 1024;
            if (value.toFixed(2) < 1024) {
                return format(value, ' ' + 'KB');
            }
            value = value / 1024;
            if (value.toFixed(2) < 1024) {
                return format(value, ' ' + 'MB');
            }
            value = value / 1024;
            if (value.toFixed(2) < 1024) {
                return format(value, ' ' + 'GB');
            }
            value = value / 1024;
            if (value.toFixed(2) < 1024) {
                return format(value, ' ' + 'TB');
            }
            value = value / 1024;
            return format(value, ' ' + 'PB');
        };
    });

    angular.module('angularapp').filter('statusmap', function () {
        return function (statusnum) {
            if (statusnum == 1) {
                return 'PROTECTED';
            }
            if (statusnum == 2) {
                return 'UNPROTECTED';
            }
            if (statusnum == 4) {
                return 'BACKUP ERROR';
            }
            return 'UNKNOWN';
        };
    });

    angular.module('angularapp').filter('elapsedTime', function () {
        return function (text) {
            if (text == undefined) {
                return "...";
            }
            var days = Math.floor(text / 60 / 60 / 24);
            var secondsInDay = text % (60 * 60 * 24);
            var hrs = Math.floor(secondsInDay / 60 / 60);
            var min = Math.floor((secondsInDay - hrs * 60 * 60) / 60);
            var sec = secondsInDay - hrs * 60 * 60 - min * 60;
            days = (days == 0 ? "" : days + " " + "days" + " ");
            hrs = (hrs == 0 ? "" : hrs + " " + "hours" + " ");
            min = (min == 0 ? "" : min + " " + "minutes" + " ");
            sec = sec + " " + "seconds";
            return days + hrs + min + sec;
        };
    });

    angular.module('angularapp').constant('JOB_STATUS', {
        RUNNING: 'running',
        PENDING: 'pending',
        SUSPENDED: 'suspended',
        QUEUED: 'queued',
        WAITING: 'waiting',
        COMPLETED: 'completed',
        COMPLETED_WITH_ERRORS: 'completed w/ one or more errors',
        KILLED: 'killed',
        FAILED: 'failed',
        FAILED_TO_START: 'failed to start'
    });

    angular.module('angularapp').constant('JOB_ACTION', {
        SUSPEND: 'job_suspend',
        KILL: 'job_kill',
        RESUME: 'job_resume',
        RESUBMIT: 'job_resubmit',
        RESTORE: 'job_restore'
    });

    angular.module('angularapp').controller('ViewJobsController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
        '$interval',
        'jobFactory',
        'JOB_ACTION',
		'utilFactory',
		'$rootScope',
        function ($scope, $cookies, toasterservice, restservice, $interval, jobFactory, JOB_ACTION, utilFactory, $rootScope) {

            $scope.tableLoaded = false;

            $scope.pageSizeList = [5, 10, 20, 50, 100];
            $scope.pageSize = $scope.pageSizeList[3];
            $scope.reverse = true;

            $scope.toggleActionDropdown = function (clientProperty) {
                clientProperty.showActionDropdown = !clientProperty.showActionDropdown;
                if (clientProperty.showActionDropdown) {
                    if ($scope.openDropdownClientproperty) {
                        if ($scope.openDropdownClientproperty !== clientProperty) {
                            $scope.openDropdownClientproperty.showActionDropdown = false;
                        }
                    }
                    $scope.openDropdownClientproperty = clientProperty;
                }
            };

            window.onclick = function (event) {
                if (!event.target.matches('.action-dropbtn') && !event.target.matches('.action-dropbtn .button-icon')) {
                    if ($scope.openDropdownClientproperty) {
                        $scope.openDropdownClientproperty.showActionDropdown = false;
                        $scope.$apply();
                    }
                }
            };

            $scope.sort = function (keyname) {
                $scope.sortField = keyname;
                $scope.reverse = !$scope.reverse;
                $scope.sortDirection = $scope.reverse ? 1 : 0;
                $scope.getJobs();
            };

            $scope.jobsList = [];
            $scope.jobCategory = 1; // 1 - ACTIVE JOBS, 2 - FINISHED

            $scope.sortField = "jobStartTime";
            $scope.sortDirection = 1;
            $scope.offset = 0;
            $scope.completedJobLookupTime = 7776000;

            $scope.categorySwitch = false;

            $scope.totalJobs = 0;
            $scope.pagination = {
                current: 1
            };

            $scope.pageChanged = function (newPageNumber) {
                $scope.offset = ((newPageNumber - 1) * $scope.pageSize);
                $scope.getJobs();
            };

            $scope.onJobTypeSelection = function (selectedJobType) {
                $scope.jobCategory = selectedJobType;
                $scope.categorySwitch = true;
                $scope.hideHelpDialog();
                $scope.getJobs();
            };

            $scope.showHelpDialog = function (helpInfo) {
                $scope.showHelp = true;
                $scope.helpInfo = helpInfo;
            };

            $scope.hideHelpDialog = function () {
                $scope.showHelp = false;
                $scope.helpInfo = '';
            };

            $scope.onGetJobs = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");
                var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    $scope.getJobsResponse = responseJson;
                    $scope.totalJobs = $scope.getJobsResponse.totalRecordsWithoutPaging;
                    $scope.jobsList = $scope.getJobsResponse.jobs;
                    $scope.tableLoaded = true;
                    if (!$scope.jobsList || $scope.jobsList.length === 0) {
                        $scope.showHelpDialog('No jobs to display');
                    } else {
                        $scope.hideHelpDialog();
                    }
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not fetch jobs. Something went wrong');
                }

                $scope.onAjax = false;

                $scope.categorySwitch = false;

                console.log($scope.getJobsResponse);
            };

            $scope.getJobs = function () {
                console.log('getting jobs');
                $scope.onAjax = true;

                var jobsInfo = {
                    category: $scope.jobCategory,
                    sortField: $scope.sortField,
                    sortDirection: $scope.sortDirection,
                    offset: $scope.offset,
                    limit: $scope.pageSize,
                    completedJobLookupTime: $scope.completedJobLookupTime
                };
				
				utilFactory.startStayLoggedInScheduler($scope, window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint);

                restservice.getJobs(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, jobsInfo).then($scope.onGetJobs,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );

            };

            $scope.showJobDetails = function (job) {
                $scope.selectedJob = job;
                $j_commvault('#jobDetailsModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#jobDetailsModal').modal('show');
            };

            $j_commvault('#jobDetailsModal').on('hidden.bs.modal', function (e) {
                $scope.selectedJob = null;
            });

            /***************************************************************************************/

            $scope.isActionAllowed = function (action, jobSummary) {
                return jobFactory.isActionAllowed(action, jobSummary);
            };

            $scope.performJobOpertaion = function (action, jobId) {
                var onPerformJobOpertaion = function (response) {
                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.getJobs();
                        try {
                            if (responseJson.errors[0].errList[0].errorCode === 0) {
                                var opstring = 'operated';
                                switch (response.config.data.action) {
                                    case JOB_ACTION.KILL:
                                        opstring = 'killed';
                                        break;
                                    case JOB_ACTION.SUSPEND:
                                        opstring = 'suspended';
                                        break;
                                    case JOB_ACTION.RESUME:
                                        opstring = 'resumed';
                                        break;
                                }
                                toasterservice.showInfoToast('Job operation', 'Successfully ' + opstring + ' job with Id ' + response.config.data.jobId);
                            } else {
                                toasterservice.showErrorToast('Job operation error', responseJson.errors[0].errList[0].errLogMessage);
                            }
                        } catch (e) {
                            console.log('Failed to evaluate error code');
                        }

                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch jobs. Something went wrong');
                    }

                };

                var opinfo = {
                    action: action,
                    jobId: jobId
                };
                restservice.performJobOpertaion(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, opinfo).then(onPerformJobOpertaion,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };
			
			$scope.showSendLogsModal = function (job) {
				$scope.selectedJobForSendLogs = job;
				$scope.sendLogsModel.emailSubject = "Logs for job " + job.jobSummary.jobId;
                $j_commvault('#sendLogsModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#sendLogsModal').modal('show');
			};
			
			$scope.onSendLogsSubmit = function () {
				var selectedJobForSendLogs = $scope.selectedJobForSendLogs;
				
				$scope.sendLogsModel.errorText = '';
				$scope.sendLogsModel.infoText = '';
				
				if($scope.sendLogsModel.autoUpload === false && $scope.sendLogsModel.outputTo === false) {
					$scope.sendLogsModel.errorText = 'Please select either auto upload or output to path';
					return;
				}
				
				if($scope.sendLogsModel.outputTo === true) {
					if($scope.sendLogsModel.pathSelectionRadio != 'localPath' && $scope.sendLogsModel.pathSelectionRadio != 'networkPath') {
						$scope.sendLogsModel.errorText = 'Please specify a local path or network path';
						return;
					}
					
					if($scope.sendLogsModel.pathSelectionRadio == 'localPath') {
						if(!$scope.sendLogsModel.localPath || $scope.sendLogsModel.localPath.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify a local path';
							return;
						} 
					}
					
					if($scope.sendLogsModel.pathSelectionRadio == 'networkPath') {
						if(!$scope.sendLogsModel.networkPath || $scope.sendLogsModel.networkPath.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify a network path';
							return;
						}
						if(!$scope.sendLogsModel.networkUserName || $scope.sendLogsModel.networkUserName.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify network path credentials';
							return;
						}
						if(!$scope.sendLogsModel.networkPassword || $scope.sendLogsModel.networkPassword.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify network path credentials';
							return;
						} 
					}
				}
				
				if($scope.sendLogsModel.notifyByEmail) {
					if((!$scope.sendLogsModel.userSelection || $scope.sendLogsModel.userSelection.trim().length === 0) && !$scope.sendLogsModel.isIncludeMe) {
						$scope.sendLogsModel.errorText = 'Please select users to notify';
						return;
					}
					
					if(!$scope.sendLogsModel.emailSubject || $scope.sendLogsModel.emailSubject.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide a subject to the email';
						return;
					}
					
				}
				
				if($scope.sendLogsModel.isTransactionLogsSelected == true) {
					if($scope.sendLogsModel.transactionRangeFrom.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide job Id range';
						return;
					}
					if($scope.sendLogsModel.transactionRangeTo.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide job Id range';
						return;
					}
					if(!Number.isInteger(+$scope.sendLogsModel.transactionRangeFrom) || !Number.isInteger(+$scope.sendLogsModel.transactionRangeTo)) {
						$scope.sendLogsModel.errorText = 'Please provide valid job Id range';
						return;
					}
				}
				
				$scope.sendLogsModel.errorText = '';
				$scope.sendLogsModel.infoText = 'Please wait...';
				
				var onSendLogFiles = function(response) {
					var responseJson = response.data.result;
					
					$j_commvault('#sendLogsModal').modal('hide');
					
                    if (responseJson.cvStatusCode === 200) {
						toasterservice.showInfoToast('Send log files', 'Job started with Job Id: ' + responseJson.jobIds[0]);
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not submit send logs request. Something went wrong');
                    }
				};
				
				restservice.sendLogFilesForJob(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, selectedJobForSendLogs, $scope.sendLogsModel).then(onSendLogFiles,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
				
				
			};
			
			$j_commvault('#sendLogsModal').on('hidden.bs.modal', function (e) {
                $scope.sendLogsModel = {
					 autoUpload: false,
					 outputTo: false,
					 pathSelectionRadio: 'localPath',
					 localPath: '',
					 networkPath: '',
					 isCommservDbLogSelected: false,
					 isLatestDbLogSelected: false,
					 isLogsSelected: true,
					 isDbLogsSelected: false,
					 isMachineConfigSelected: true,
					 isOsLogsSelected: true,
					 isProcessDumpSelected: true,
					 isJobResultsSelected: false,
					 isIndexLogSelected: false,
					 isTransactionLogsSelected: false,
					 transactionRangeFrom: '',
					 transactionRangeTo: '',	
					 notifyByEmail: false,
					 userSelection: '',
					 isIncludeMe: true,
					 isAttachLogs: false,
					 emailSubject: '',
					 problemDescription: '',
					 userImpersonate: false,
					 networkUserName: '',
					 networkPassword: ''
				};
                $scope.$apply();
            });
			
			 $scope.sendLogsModel = {
				 autoUpload: false,
				 outputTo: false,
				 pathSelectionRadio: 'localPath',
				 localPath: '',
				 networkPath: '',
				 isCommservDbLogSelected: false,
				 isLatestDbLogSelected: false,
				 isLogsSelected: true,
				 isDbLogsSelected: false,
				 isMachineConfigSelected: true,
				 isOsLogsSelected: true,
				 isProcessDumpSelected: true,
				 isJobResultsSelected: false,
				 isIndexLogSelected: false,
				 isTransactionLogsSelected: false,
				 transactionRangeFrom: '',
				 transactionRangeTo: '',	
				 notifyByEmail: false,
				 userSelection: '',
				 isIncludeMe: true,
				 isAttachLogs: false,
				 emailSubject: '',
				 problemDescription: '',
				 userImpersonate: false,
				 networkUserName: '',
				 networkPassword: ''
			};
			
			$scope.localPathRadioChange = function() {
				$scope.sendLogsModel.localPath = '';
				$scope.sendLogsModel.networkPath = '';
				$scope.sendLogsModel.networkUserName = '';
				$scope.sendLogsModel.networkPassword = '';
			};
			
			$scope.networkPathRadioChange = function() {
				$scope.sendLogsModel.localPath = '';
				$scope.sendLogsModel.networkPath = '';
				$scope.sendLogsModel.networkUserName = '';
				$scope.sendLogsModel.networkPassword = '';
			};
			

            /***************************************************************************************/

            var scheduler;
            $scope.startScheduler = function () {
                $scope.getJobs();
                if (angular.isDefined(scheduler)) return;
                scheduler = $interval($scope.getJobs, 60 * 1000);
            };
            $scope.stopScheduler = function () {
                console.log('Stopping scheduler');
                if (angular.isDefined(scheduler)) {
                    $interval.cancel(scheduler);
                    scheduler = undefined;
                }
            };
            $scope.$on('$destroy', function () {
                $scope.stopScheduler();
            });
			
			$scope.$on('loggedout', function(event, data) {
                $scope.cvLogin.unauthorized = true;
            });

            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.startScheduler();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);

    angular.module('angularapp').controller('VMController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
        function ($scope, $cookies, toasterservice, restservice) {
            console.log('In VM controller');
			
			$scope.modernBrowsers = [
				{  name: "Opera",              maker: "(Opera Software)",        ticked: true  },
				{  name: "Internet Explorer",  maker: "(Microsoft)",             ticked: false },
				{  name: "Firefox",            maker: "(Mozilla Foundation)",    ticked: true  },
				{  name: "Safari",             maker: "(Apple)",                 ticked: false },
				{  name: "Chrome",             maker: "(Google)",                ticked: true  }
			];

            /*$j_commvault('#loginModal').modal({
            		keyboard: false,
            		backdrop: 'static'
            	});
            $j_commvault('#loginModal').modal('show');*/

            $scope.getVMList = function () {
                $scope.onVMList = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.vmListResponse = responseJson;
                        $scope.vmList = $scope.vmListResponse.vmStatusInfoList;
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch vm list. Something went wrong');
                    }


                    $scope.onAjax = false;
                    console.log($scope.vmList);
                };

                $scope.onAjax = true;

                restservice.getVMList(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint).then($scope.onVMList,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );

            };

            $scope.sort = function (keyname) {
                $scope.sortKey = keyname;
                $scope.reverse = !$scope.reverse;
            };

            $scope.toggleActionDropdown = function (vm) {
                vm.showActionDropdown = !vm.showActionDropdown;
                if (vm.showActionDropdown) {
                    if ($scope.openDropdownVm) {
                        if ($scope.openDropdownVm !== vm) {
                            $scope.openDropdownVm.showActionDropdown = false;
                        }
                    }
                    $scope.openDropdownVm = vm;
                }
            };

            window.onclick = function (event) {
                if (!event.target.matches('.action-dropbtn') && !event.target.matches('.action-dropbtn .button-icon')) {
                    if ($scope.openDropdownVm) {
                        $scope.openDropdownVm.showActionDropdown = false;
                        $scope.$apply();
                    }
                }
            };

            $scope.pageSizeList = [5, 10, 20, 50, 100];
            $scope.pageSize = $scope.pageSizeList[2];

            $scope.showBackupModal = function (vm) {
                $scope.errorText = '';
                $scope.infoText = '';
                $j_commvault('#backupModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#backupModal').modal('show');
                $scope.selectedVm = vm;
            };

            $scope.showFullVmRestoreModal = function (vm) {
                $scope.errorText = '';
                $scope.infoText = '';
                $j_commvault('#restoreModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#restoreModal').modal('show');
                $scope.selectedVmForFullRestore = vm;
                $scope.vmOverwrite = true;
                $scope.vmPowerOn = true;
                $scope.newName = $scope.selectedVmForFullRestore.name;
            };

            $scope.runFullVmRestoreCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#restoreModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runFullVmRestoreResponse = responseJson;
                    toasterservice.showInfoToast('Full VM Restore', 'Vm restore started with Job Id: ' + $scope.runFullVmRestoreResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run restore. Something went wrong');
                }

                console.log($scope.runFullVmRestoreResponse);
            };

            $scope.onFullVmRestore = function () {
                $scope.errorText = '';
                $scope.infoText = '';
                if (($scope.newName === $scope.selectedVmForFullRestore.name) && ($scope.vmOverwrite === false)) {
                    $scope.errorText = 'Select overwrite option if the new vm name is same as the old name';
                    return;
                }
                if ($scope.newName.trim().length === 0) {
                    $scope.errorText = 'Please specify a name for the vm';
                    return;
                }
                if (!$scope.selectedVmForFullRestore) {
                    $scope.errorText = 'Please select a vm';
                    return;
                }

                $scope.unconditionalOverwrite = $scope.vmOverwrite ? 1 : 0;
                $scope.powerOnVmAfterRestore = $scope.vmPowerOn ? 1 : 0;

                $scope.infoText = 'Please wait...';

                var restoreInfo = {
                    newName: $scope.newName,
                    unconditionalOverwrite: $scope.unconditionalOverwrite,
                    powerOnVmAfterRestore: $scope.powerOnVmAfterRestore,
                    destClientId: $scope.selectedVmForFullRestore.proxyClient.clientId,
                    destClientName: $scope.selectedVmForFullRestore.proxyClient.clientName,
                    subclientId: $scope.selectedVmForFullRestore.subclientId,
                    vmGuid: $scope.selectedVmForFullRestore.strGUID,
                    vmName: $scope.selectedVmForFullRestore.name
                };

                restservice.runFullVmRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFullVmRestoreCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.showFileLevelRestoreModal = function (vm) {
                $scope.errorText = '';
                $scope.infoText = '';
                $scope.selectedVmForFileLevelRestore = vm;
                $j_commvault('#flvmrestoreModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#flvmrestoreModal').modal('show');
            };

            $j_commvault('#flvmrestoreModal').on('hidden.bs.modal', function (e) {
                $scope.errorText = '';
                $scope.infoText = '';
                $scope.vmusername = '';
                $scope.vmpassword = '';
                $scope.vmFileOverwrite = '';
                $scope.vmFileSourcePath = '';
                $scope.vmFileDestPath = '';
                $scope.selectedVmForFileLevelRestore = null;
                $scope.$apply();
            });

            $scope.runFileLevelVmRestoreCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;
                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#flvmrestoreModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runFileLevelVmRestoreResponse = responseJson;
                    toasterservice.showInfoToast('File level VM Restore', 'Restore started with Job Id: ' + $scope.runFileLevelVmRestoreResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not restore. Something went wrong');
                }

                console.log($scope.runFileLevelVmRestoreResponse);
            };

            $scope.onFileLevelVmRestore = function () {
                if (!$scope.vmusername || !$scope.vmpassword || $scope.vmusername.trim().length === 0 || $scope.vmpassword.trim().length === 0) {
                    $scope.errorText = 'Please provide guest vm credentials';
                    return;
                }
                if (!$scope.vmFileSourcePath || $scope.vmFileSourcePath.trim().length === 0) {
                    $scope.errorText = 'Please provide source file path to restore';
                    return;
                }
                if (!$scope.vmFileDestPath || $scope.vmFileDestPath.trim().length === 0) {
                    $scope.errorText = 'Please provide destination file path';
                    return;
                }
                if (!$scope.selectedVmForFileLevelRestore) {
                    $scope.errorText = 'Please select a vm to restore';
                    return;
                }

                var overwriteFiles = $scope.vmFileOverwrite ? 1 : 0;
                var sourcePath = "\\" + $scope.selectedVmForFileLevelRestore.strGUID + "\\" + $scope.vmFileSourcePath;
                var destPath = $scope.vmFileDestPath;

                $scope.errorText = '';
                $scope.infoText = 'Please wait...';

                var restoreInfo = {
                    subclientId: $scope.selectedVmForFileLevelRestore.subclientId,
                    destPath: destPath,
                    destClientId: $scope.selectedVmForFileLevelRestore.proxyClient.clientId,
                    destClientName: $scope.selectedVmForFileLevelRestore.proxyClient.clientName,
                    serverName: $scope.selectedVmForFileLevelRestore.pseudoClient.clientName,
                    vmGuid: $scope.selectedVmForFileLevelRestore.strGUID,
                    vmUsername: $scope.vmusername,
                    vmPassword: $scope.vmpassword,
                    sourcePath: sourcePath,
                    overwriteFiles: overwriteFiles
                };

                restservice.runFileLevelVmRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFileLevelVmRestoreCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.onBackupLevelSelection = function (selectedBackupLevel) {
                $scope.selectedBackupLevel = selectedBackupLevel;
            };

            $scope.runBackupVmCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");
                var responseJson = response.data.result;

                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#backupModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runBackupResponse = responseJson;
                    toasterservice.showInfoToast('Backup', 'Vm backup started with Job Id: ' + $scope.runBackupResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run backup. Something went wrong');
                }

                console.log($scope.runBackupResponse);
            };

            $scope.onRunBackupVm = function () {
                $scope.errorText = "";
                if (!$scope.selectedBackupLevel) {
                    $scope.errorText = "Please select a backup level";
                    return;
                }
                if (!$scope.selectedVm) {
                    $scope.errorText = "Please select a vm";
                    return;
                }


                $scope.infoText = 'Please wait...';

                var backupInfo = {
                    vmGuid: $scope.selectedVm.strGUID,
                    subclientId: $scope.selectedVm.subclientId,
                    backupLevel: $scope.selectedBackupLevel
                };

                restservice.runBackupVm(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, backupInfo).then($scope.runBackupVmCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );

            };


            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.getVMList();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);

    angular.module('angularapp').controller('SLAReportController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, toasterservice, restservice, utilFactory) {
            console.log('In SLA Report controller');

            $scope.pieData = [];
            $scope.chartConfig = {
                chart: {
                    type: 'pie',
                    margin: [0, 200, 0, 0],
                    spacingTop: 0,
                    spacingBottom: 0,
                    spacingLeft: 0,
                    spacingRight: 0
                },
                plotOptions: {
                    pie: {
                        showInLegend: true
                    }
                },
                series: [{
                    data: $scope.pieData,
                    id: 'SLA Summary'
                }],
                title: {
                    text: '',
                },
                credits: {
                    enabled: false
                },
                legend: {
                    enabled: true,
                    layout: 'vertical',
                    align: 'right',
                    width: 200,
                    verticalAlign: 'middle',
                    useHTML: true,
                    labelFormatter: function () {
                        return '<div style="text-align: left; width:130px;float:left;">' + this.name + ' ' + this.y;
                    }
                }
            };

            $scope.pageSizeList = [5, 10, 20, 50, 100];
            $scope.pageSize = $scope.pageSizeList[2];

            $scope.tableHeaders = [];
            $scope.tableData = [];

            $scope.SLAReportObj = [];
            $scope.getSLAReport = function () {
                $scope.onGetSLAReport = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.SLAReport = responseJson;
                        console.log($scope.SLAReport);

                        angular.forEach($scope.SLAReport.pages, function (page) {
                            angular.forEach(page.dataSets.dataSet, function (value, key) {
                                var currentDataset = value;
                                if (currentDataset.dataSet.dataSetName === 'SLA Details' || currentDataset.dataSet.dataSetName === 'SLA Summary') {

                                    /* call api to get records using dataset id */

                                    $scope.onGetData = function (response) {
                                        //var answer = response.responseXML.documentElement.getAttribute("answer");
                                        var responseJson = response.data.result;

                                        if (responseJson.cvStatusCode === 200) {
                                            var dataSetData = responseJson;

                                            console.log('dataSetData' + dataSetData);

                                            $scope.SLAReportObj[currentDataset.dataSet.dataSetName] = {
                                                dataSetID: currentDataset.dataSet.dataSetId,
                                                columns: dataSetData.columns,
                                                records: dataSetData.records
                                            };

                                            if (currentDataset.dataSet.dataSetName === 'SLA Summary') {
                                                angular.forEach(dataSetData.records, function (record, rIndex) {
                                                    if (record[1] === 'Missed SLA') {
                                                        $scope.pieData.push({
                                                            y: record[2],
                                                            name: record[1],
                                                            color: "#cc0000"
                                                        });
                                                    } else if (record[1] === 'Met SLA ') {
                                                        $scope.pieData.push({
                                                            y: record[2],
                                                            name: record[1],
                                                            color: "#666699"
                                                        });
                                                    }
                                                    $scope.onAjax = false;
                                                    //$scope.$apply();
                                                });
                                            } else if (currentDataset.dataSet.dataSetName === 'SLA Details') {
                                                $scope.tableHeaders = dataSetData.columns;
                                                angular.forEach(dataSetData.records, function (record, rIndex) {
                                                    var rowData = {};
                                                    rowData.rowId = record[0]; //sys_rowid
                                                    rowData.dataSource = record[1]; //Data Source
                                                    rowData.clientGroups = record[2]; //Client Groups
                                                    rowData.clientId = record[3]; //ClientId
                                                    rowData.client = record[4]; //Client
                                                    rowData.slaStatus = record[5]; //SLA Status
                                                    rowData.clientOwners = record[6]; //Client Owners
                                                    rowData.category = record[7]; //Category
                                                    rowData.slaDays = record[8]; //SLA Days

                                                    $scope.tableData.push(rowData);

                                                    //$scope.$apply();
                                                });
                                            }

                                            console.log('SLA Report object' + $scope.SLAReportObj);
                                        } else if (responseJson.cvStatusCode === 401) {
                                            //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                                            //$scope.showLoginModal();
                                            $scope.cvLogin.unauthorized = true;
                                            //$scope.cvLogin = {};
                                        } else {
                                            toasterservice.showErrorToast('Commvault error', 'Could not fetch report. Something went wrong');
                                        }

                                    };

                                    restservice.getDataForDataset(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, currentDataset.dataSet.dataSetId).then($scope.onGetData,
                                        function () {
                                            toasterservice.showErrorToast('API Error', 'Something went wrong');
                                        }
                                    );

                                }
                            });
                        });
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch report. Something went wrong');
                    }

                };
				
				utilFactory.startStayLoggedInScheduler($scope, window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint);

                $scope.onAjax = true;

                restservice.getSLAReport(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint).then($scope.onGetSLAReport,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };


			$scope.$on('loggedout', function(event, data) {
                $scope.cvLogin.unauthorized = true;
            });
            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.getSLAReport();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);

    angular.module('angularapp').controller('ScheduleController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, toasterservice, restservice, utilFactory) {
            console.log('In schedule controller');

            $scope.getSchedules = function () {
                $scope.onSchedules = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.schedules = responseJson;
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch schedules. Something went wrong');
                    }

                    $scope.onAjax = false;
                    //$scope.$apply();
                    console.log($scope.schedules);
                };
				
				utilFactory.startStayLoggedInScheduler($scope, window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint);
				
                $scope.onAjax = true;
                restservice.getSchedules(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint).then($scope.onSchedules,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };
			
			$scope.$on('loggedout', function(event, data) {
                $scope.cvLogin.unauthorized = true;
            });

            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.getSchedules();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);

	
	angular.module('angularapp').controller('ViewClientGroupsController', [
        '$scope',
        '$cookies',
        '$timeout',
        '$q',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, $timeout, $q, toasterservice, restservice, utilFactory) {
			$scope.tableLoaded = false;
			
			$j_commvault('#addEditServerGroupModal').on('hidden.bs.modal', function (e) {
                $scope.addEditServerGroupModel = {};
                $scope.$apply();
            });
			
			$j_commvault('#deleteModal').on('hidden.bs.modal', function (e) {
                $scope.clientGroupToDelete = {};
                $scope.$apply();
            });
			
			var getAllClients = function () {
				var deferred = $q.defer();
				
				var allClientsClientGroupId = 0;
				
				restservice.getClientsForClientGroup(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, allClientsClientGroupId).then(
					function(response) {
						var responseJson = response.data.result;

						if (responseJson.cvStatusCode === 200) {
							deferred.resolve(responseJson);
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							deferred.reject('Could not get all clients');
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not get all clients. Something went wrong');
							deferred.reject('Could not get all clients');
						}
					},
					function() {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
						deferred.reject('Could not get all clients');
                    }
				);
				
				return deferred.promise;
			};
			
			var getAssociatedClients = function (clientGroupId) {
				var deferred = $q.defer();
				
				restservice.getClientGroupProperties(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, clientGroupId).then(
					function(response) {
						var responseJson = response.data.result;

						if (responseJson.cvStatusCode === 200) {
							deferred.resolve(responseJson);
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							deferred.reject('Could not get associated clients');
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not get associated clients. Something went wrong');
							deferred.reject('Could not get associated clients');
						}
					},
					function() {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
						deferred.reject('Could not get associated clients');
                    }
				);
				
				return deferred.promise;
			};
			
			var showAddEditServerGroupModal = function () {
				$j_commvault('#addEditServerGroupModal').modal({
					keyboard: false,
					backdrop: 'static'
				});
				$j_commvault('#addEditServerGroupModal').modal('show');
			};
			
			var getFlattenedClientList = function (originalClients, associatedClients) {
				var selectedClients = [];
				if (associatedClients) {
					associatedClients.forEach(function(c) {
						selectedClients.push(c.clientId);
					});
				}
				
				var flattened = [];
				if (associatedClients && ((((((associatedClients.length > 0))))))) {
					associatedClients.forEach(function(c) {
						var clientId = c.clientId;
						var clientName = c.clientName;
						var selected = true;

						flattened.push({
							label : clientName,
							value : c.clientId,
							selected : selected,
						});
					});
				}
				
				originalClients.forEach(function(c) {
					var clientId = c.client.clientEntity.clientId;
					var clientName = c.client.clientEntity.clientName;
					var selected = selectedClients ? selectedClients.indexOf(clientId) > -1
					: false;
					if (!selected) { //Selected clients are already pushed from associatedClients list
						flattened.push({
							label : clientName,
							value : clientId,
							selected : selected,
						});
					}
				});
				
				//$scope.addEditServerGroupModel.selectedClientsCount = selectedClients.length;
				
				return flattened;
			};
			
			$scope.onSelectAll = function () {
				$scope.addEditServerGroupModel.selectAll = !$scope.addEditServerGroupModel.selectAll;
				var targetState = $scope.addEditServerGroupModel.selectAll;
				
				if($scope.addEditServerGroupModel.flattenedClientList && $scope.addEditServerGroupModel.flattenedClientList.length > 0)
				$scope.addEditServerGroupModel.flattenedClientList.forEach(function(c) {
					c.selected = targetState;
				}); 
			};
			
			$scope.onSelectedClientBadgeClick = function(client) {
				client.selected = false;	
			};
			
			$scope.getClientGroupData = function (opType, clientGroup) {
				
				$scope.addEditServerGroupModel = {
					clientGroupOptype : opType,
					clientGroupId : 0,
					clientGroupName : '',
					showSelected: false,
					selectAll: false,
					onSubmitCall: false
				};
				
				if($scope.addEditServerGroupModel.clientGroupOptype === 'CREATE') {
					
				}
				
				if($scope.addEditServerGroupModel.clientGroupOptype === 'UPDATE') {
					$scope.addEditServerGroupModel.selectedClientGroupForEdit = clientGroup;
					$scope.addEditServerGroupModel.clientGroupId = clientGroup.Id;
					$scope.addEditServerGroupModel.clientGroupName = clientGroup.name;
					$scope.addEditServerGroupModel.oldClientGroupName = clientGroup.name;
				}
				
				$scope.onAjax = true;
				
				getAllClients().then(
					function(response) {
						console.log("get all clients");
						console.log(response);
						$scope.addEditServerGroupModel.originalClients = response.clientProperties;
						if($scope.addEditServerGroupModel.clientGroupOptype === 'UPDATE') {
							return getAssociatedClients(clientGroup.Id);
						} else {
							return null;
						}
					},
					function (error) {
						toasterservice.showErrorToast('API Error', error);
					}
				).then(
					function(response) {
						console.log("get associated clients");
						console.log(response);
						if(response) {
							$scope.addEditServerGroupModel.associatedClients = response.clientGroupDetail.associatedClients;
						} else {
							$scope.addEditServerGroupModel.associatedClients = null;
						}
						$scope.addEditServerGroupModel.flattenedClientList = getFlattenedClientList($scope.addEditServerGroupModel.originalClients, $scope.addEditServerGroupModel.associatedClients);

						$scope.addEditServerGroupModel.oldFlattenedClientList = angular.copy($scope.addEditServerGroupModel.flattenedClientList);
						
						showAddEditServerGroupModal();
					}, function(error) {
						toasterservice.showErrorToast('API Error', error);
					} 
				).finally(function() {
					$scope.onAjax = false;
				});
			};
			
			$scope.postClientGroupOperationCallback = function (response) {
				var responseJson = response.data.result;

				if (responseJson.cvStatusCode === 200) {
					if(responseJson.errorMessage && responseJson.errorMessage.length > 0 && responseJson.errorCode && responseJson.errorCode > 0) {
						toasterservice.showInfoToast('Client Group', responseJson.errorMessage);
					} else {
					
						var actionString = '';
						var clientGroupName = $scope.addEditServerGroupModel.clientGroupName;
						if( $scope.addEditServerGroupModel.clientGroupOptype == 'CREATE') {
							actionString = 'created';
						} else if( $scope.addEditServerGroupModel.clientGroupOptype == 'UPDATE') {
							actionString = 'updated';
						}
						toasterservice.showInfoToast('Client Group', clientGroupName + ' successfully ' + actionString);
						$scope.getClientGroups();
					}
					
				} else if (responseJson.cvStatusCode === 401) {
					//toasterservice.showInfoToast('Commvault login', 'User is logged out');
					//$scope.showLoginModal();
					$scope.cvLogin.unauthorized = true;
					//$scope.cvLogin = {};
				} else {
					toasterservice.showErrorToast('Commvault error', 'Could not perform operation on client group. Something went wrong');
				}
				$scope.addEditServerGroupModel.onSubmitCall = false;
				$j_commvault('#addEditServerGroupModal').modal('hide');
			};
			
			$scope.onAddEditClientGroupSubmit = function () {
				if(!$scope.addEditServerGroupModel) {
					toasterservice.showErrorToast('Invalid data', 'Please select a client group');
					return;
				}
				
				if(!$scope.addEditServerGroupModel.clientGroupName || $scope.addEditServerGroupModel.clientGroupName.trim().length === 0) {
					$scope.addEditServerGroupModel.errorText = 'Please provide a client group name';
					return;
				}
				
				$scope.addEditServerGroupModel.errorText = '';
				$scope.addEditServerGroupModel.infoText = 'Please wait..';
				
				var getReducedArray = function (origClientlist) {
					var reducedClientList = [];
					origClientlist.forEach(function(c) {
						if (c.selected) {
							reducedClientList.push(c.value);
						} 
					});
					return reducedClientList;
				};
				
				if(!angular.equals($scope.addEditServerGroupModel.flattenedClientList, $scope.addEditServerGroupModel.oldFlattenedClientList) || $scope.addEditServerGroupModel.oldClientGroupName != $scope.addEditServerGroupModel.clientGroupName) {
					
					var clientGroupInfo = {
						action: $scope.addEditServerGroupModel.clientGroupOptype,
						clientGroupId: $scope.addEditServerGroupModel.clientGroupId,
						clientGroupName: $scope.addEditServerGroupModel.clientGroupName
					};
					
					clientGroupInfo.clientList = getReducedArray($scope.addEditServerGroupModel.flattenedClientList);
					
					$scope.addEditServerGroupModel.onSubmitCall = true;
					restservice.postClientGroupOperation(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, clientGroupInfo).then($scope.postClientGroupOperationCallback,
						function () {
							toasterservice.showErrorToast('API Error', 'Something went wrong');
						}
					);
					
					
				} else {
					toasterservice.showInfoToast('Client Group', 'No changes to save');
					$scope.addEditServerGroupModel.onSubmitCall = false;
					$j_commvault('#addEditServerGroupModal').modal('hide');
				}
			};
			
			$scope.showDeleteClientGroupModal = function (clientGroup) {
				$scope.clientGroupToDelete = clientGroup;
				
				$j_commvault('#deleteModal').modal({
					keyboard: false,
					backdrop: 'static'
				});
				$j_commvault('#deleteModal').modal('show');
			};
			
			$scope.confirmDelete = function (clientGroup) {
				$scope.deleteClientGroup(clientGroup);
				$j_commvault('#deleteModal').modal('hide');
			};
			
			$scope.deleteClientGroup = function (clientGroup) {
				var selectedClientGroupName = clientGroup.name;
				var selectedClientGroupId = clientGroup.Id;
				
				restservice.deleteClientGroupOperation(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, selectedClientGroupId).then(
					function (response) {
						var responseJson = response.data.result;
						if (responseJson.cvStatusCode === 200) {
							toasterservice.showInfoToast('Client group', 'Successfully deleted ' + selectedClientGroupName);
							$scope.getClientGroups();
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not perform operation on client group. Something went wrong');
						}
					},
					function () {
						toasterservice.showErrorToast('API Error', 'Something went wrong');
					}																															
				);
			};
			
			$scope.getClientGroups = function () {
                $scope.onGetClientGroups = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.clientGroupResponse = responseJson;
                        $scope.tableLoaded = true;
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch client groups. Something went wrong');
                    }

                    $scope.onAjax = false;
                    console.log($scope.clientResponse);
                };
				
				utilFactory.startStayLoggedInScheduler($scope, window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint);
				
                $scope.onAjax = true;
                restservice.getClientGroups(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint).then($scope.onGetClientGroups,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };
			
			
			$scope.sort = function (keyname) {
                $scope.sortKey = keyname;
                $scope.reverse = !$scope.reverse;
            };

            $scope.toggleActionDropdown = function (clientProperty) {
                clientProperty.showActionDropdown = !clientProperty.showActionDropdown;
                if (clientProperty.showActionDropdown) {
                    if ($scope.openDropdownClientproperty) {
                        if ($scope.openDropdownClientproperty !== clientProperty) {
                            $scope.openDropdownClientproperty.showActionDropdown = false;
                        }
                    }
                    $scope.openDropdownClientproperty = clientProperty;
                }
            };

            window.onclick = function (event) {
                if (!event.target.matches('.action-dropbtn') && !event.target.matches('.action-dropbtn .button-icon')) {
                    if ($scope.openDropdownClientproperty) {
                        $scope.openDropdownClientproperty.showActionDropdown = false;
                        $scope.$apply();
                    }
                }
            };

            $scope.pageSizeList = [5, 10, 20, 50, 100];
            $scope.pageSize = $scope.pageSizeList[2];


			$scope.$on('loggedout', function(event, data) {
                $scope.cvLogin.unauthorized = true;
            });
            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.getClientGroups();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
			
		}
	]);
	

    angular.module('angularapp').controller('ViewClientsController', [
        '$scope',
        '$cookies',
        '$timeout',
        '$q',
		'$rootScope',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, $timeout, $q, $rootScope, toasterservice, restservice, utilFactory) {
			
			$scope.includeVM = false;

            $scope.tableLoaded = false;
            $scope.selectedBackupLevel = null;
			
			$scope.getCvCommonProperties = function () {
				$scope.onGetCommservProperties = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $rootScope.cvCommon = responseJson;
						$scope.getClients();
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch clients. Something went wrong');
                    }
                };
				
				utilFactory.startStayLoggedInScheduler($scope, window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint);
				
				$scope.onAjax = true;
                restservice.getCommservProperties(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, $scope.includeVM).then($scope.onGetCommservProperties,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
			};

            //$scope.test = "teststring";
            $scope.getClients = function () {
                $scope.onGetClients = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.clientResponse = responseJson;
                        $scope.clientResponse.clientProperties.forEach(function (obj) {
                            var items = obj.client.idaList;
                            if (items && items.length) {

                            } else {
                                //if app is vm
                                if (obj.clientProps.isVirtualServerDiscoveredClient) {
                                    obj.client.idaList = [];
                                    var idaEntityVM = {
                                        appName: 'Virtul Machine',
                                        applicationId: ''
                                    };
                                    obj.client.idaList.push({
                                        'idaEntity': idaEntityVM
                                    });
                                } else {
                                    obj.client.idaList = [];
                                    var idaEntityGeneric = {
                                        appName: obj.client.clientEntity.clientName,
                                        applicationId: ''
                                    };
                                    obj.client.idaList.push({
                                        'idaEntity': idaEntityGeneric
                                    });
                                }
                            }
                        });
                        $scope.tableLoaded = true;
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch clients. Something went wrong');
                    }

                    $scope.onAjax = false;
                    console.log($scope.clientResponse);
                };

                $scope.onAjax = true;
                restservice.getClients(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, $scope.includeVM).then($scope.onGetClients,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $j_commvault('#backupModal').on('hidden.bs.modal', function (e) {
                $scope.errorText = '';
                $scope.infoText = '';
                $scope.appList = [];
                $scope.backupSetList = [];
                $scope.subclientList = [];
                $scope.selectedApp = null;
                $scope.selectedBackupset = null;
                $scope.selectedSubclient = null;
                $scope.selectedBackupLevel = null;
                $scope.$apply();
            });


            $scope.appList = [];
            $scope.backupSetList = [];
            $scope.subclientList = [];
            $scope.getSubclients = function (clientEntity, optype) {
                $scope.clientId = clientEntity.clientId;
                $scope.clientName = clientEntity.clientName;
                $scope.backupModalOptype = optype;
                $scope.onAjax = true;
                $scope.selectedBackupset = null;
                $scope.selectedBackupLevel = null;
                $scope.infoText = '';
                $scope.errorText = '';
                $scope.autoRunBackup = true;
                $scope.onGetSubclients = function (response) {
                    $scope.appList = [];
                    $scope.backupSetList = [];
                    $scope.subclientList = [];
                    $scope.restoreOptions = {
                        fsFileDestPath: '',
                        fsRestoreOrigLocation: true,
                        fsFileOverwrite: true,
                        fsusername: '',
                        fspassword: '',
                        fsFileSourcePath: ''
                    };
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.subclientResponse = responseJson;
                        $scope.onAjax = false;

                        console.log($scope.subclientResponse);

                        var isAppPresent = function (applicationId) {
                            for (var i = 0; i < $scope.appList.length; i++) {
                                if ($scope.appList[i].applicationId === applicationId) {
                                    return true;
                                }
                            }
                            return false;
                        };

                        angular.forEach($scope.subclientResponse.entity, function (record, rIndex) {
                            if (!isAppPresent(record.applicationId)) {
                                $scope.appList.push({
                                    applicationId: record.applicationId,
                                    appName: record.appName
                                });
                            }
                        });

                        if ($scope.appList.length > 0) {
                            if ($scope.appList.length > 1 && $scope.autoRunBackup) {
                                $scope.autoRunBackup = false;
                            }
							
							$scope.selectApp($scope.appList[0]);

                            //$scope.$apply();

                            $j_commvault('#backupModal').modal({
                                keyboard: false,
                                backdrop: 'static'
                            });
                            $j_commvault('#backupModal').modal('show');
                        } else {
                            toasterservice.showErrorToast('', 'No Apps found for this client');
                        }
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.$apply();
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not run backup. Something went wrong');
                    }

                };

                restservice.getSubclients(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, $scope.clientId).then($scope.onGetSubclients,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.getBackupSet = function (app) {
                $scope.backupSetList = [];
                $scope.subclientList = [];
                var isBackupSetPresent = function (backupsetId) {
                    for (var i = 0; i < $scope.backupSetList.length; i++) {
                        if ($scope.backupSetList[i].backupsetId === backupsetId) {
                            return true;
                        }
                    }
                    return false;
                };

                $timeout(function () {
                    angular.forEach($scope.subclientResponse.entity, function (record, rIndex) {
                        if (!isBackupSetPresent(record.backupsetId) && record.applicationId === $scope.selectedApp.applicationId) {
                            $scope.backupSetList.push({
                                backupsetId: record.backupsetId,
                                backupsetName: record.backupsetName
                            });
                        }
                    });

                    
                    if ($scope.backupSetList.length > 1 && $scope.autoRunBackup) {
                        $scope.autoRunBackup = false;
                    }
					
					$scope.selectBackupset($scope.backupSetList[0]);

                }, 200);

            };

            $scope.getSubclient = function (backupset) {
                $scope.subclientList = [];
                var isSubclientPresent = function (subclientId) {
                    for (var i = 0; i < $scope.subclientList.length; i++) {
                        if ($scope.subclientList[i].subclientId === subclientId) {
                            return true;
                        }
                    }
                    return false;
                };

                $timeout(function () {
                    angular.forEach($scope.subclientResponse.entity, function (record, rIndex) {
                        if (!isSubclientPresent(record.subclientId) && record.applicationId === $scope.selectedApp.applicationId && record.backupsetId === $scope.selectedBackupset.backupsetId) {
                            $scope.subclientList.push({
                                subclientId: record.subclientId,
                                subclientName: record.subclientName
                            });
                        }
                    });
					
					if ($scope.subclientList.length > 1 && $scope.autoRunBackup) {
                        $scope.autoRunBackup = false;
                    }

                    $scope.selectSubclient($scope.subclientList[0]);

                }, 200);
            };

            $scope.selectedApp = null;
            $scope.selectedBackupset = null;
            $scope.selectedSubclient = null;

            $scope.selectApp = function (app) {
                $scope.selectedBackupset = null;
                $scope.selectedSubclient = null;
                for (var i = 0; i < $scope.appList.length; i++) {
                    $scope.appList[i].selected = false;
                }
                app.selected = true;
                $scope.selectedApp = app;

                $scope.getBackupSet(app);
            };

            $scope.selectBackupset = function (backupset) {
                $scope.selectedSubclient = null;
                for (var i = 0; i < $scope.backupSetList.length; i++) {
                    $scope.backupSetList[i].selected = false;
                }
                backupset.selected = true;
                $scope.selectedBackupset = backupset;

                $scope.getSubclient(backupset);
            };

            $scope.selectSubclient = function (subclient) {
                for (var i = 0; i < $scope.subclientList.length; i++) {
                    $scope.subclientList[i].selected = false;
                }
                subclient.selected = true;
                $scope.selectedSubclient = subclient;

                if ($scope.backupModalOptype === 'BACKUP' && $scope.autoRunBackup) {
                    $scope.onRunBackup();
                }
            };

            $scope.onBackupLevelSelection = function (selectedBackupLevel) {
                $scope.selectedBackupLevel = selectedBackupLevel;
            };

            $scope.runBackupCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    $scope.runBackupResponse = responseJson;
                    toasterservice.showInfoToast('Backup', 'Data backup started with Job Id: ' + $scope.runBackupResponse.jobIds[0]);
                    console.log($scope.runBackupResponse);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run backup. Something went wrong');
                }

                $scope.infoText = '';
                $j_commvault('#backupModal').modal('hide');

            };

            $scope.onRunBackup = function () {
                $scope.errorText = "";
                if (!$scope.selectedApp) {
                    $scope.errorText = "Please select an application";
                    return;
                }
                if (!$scope.selectedBackupset) {
                    $scope.errorText = "Please select a backupset";
                    return;
                }
                if (!$scope.selectedSubclient) {
                    $scope.errorText = "Please select a subclient";
                    return;
                }
                /*if (!$scope.selectedBackupLevel) {
                    $scope.errorText = "Please select a backup level";
                    return;
                }*/
                if (!$scope.clientId) {
                    $scope.errorText = "Please select a client";
                    return;
                }


                $scope.infoText = 'Please wait...';
                var backupInfo = {
                    clientId: $scope.clientId,
                    subclientId: $scope.selectedSubclient.subclientId,
                    subclientName: $scope.selectedSubclient.subclientName,
                    backupsetId: $scope.selectedBackupset.backupsetId,
                    backupsetName: $scope.selectedBackupset.backupsetName,
                    appId: $scope.selectedApp.applicationId,
                    appName: $scope.selectedApp.appName,
                    backupLevel: 'INCREMENTAL'
                };
                restservice.runFsBackup(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, backupInfo).then($scope.runBackupCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.fsRestoreOrigLocationStateChanged = function () {
                $scope.restoreOptions.fsFileDestPath = '';
            };

            $scope.runFsRestoreCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    $scope.runFsRestoreResponse = responseJson;
                    toasterservice.showInfoToast('Restore', 'Data restore started with Job Id: ' + $scope.runFsRestoreResponse.jobIds[0]);
                    console.log($scope.runFsRestoreResponse);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run restore. Something went wrong');
                }

                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#backupModal').modal('hide');

            };

            $scope.onRunRestore = function () {
                $scope.errorText = "";
                $scope.infoText = "";
                if (!$scope.selectedApp) {
                    $scope.errorText = "Please select an application";
                    return;
                }
                if (!$scope.selectedBackupset) {
                    $scope.errorText = "Please select a backupset";
                    return;
                }
                if (!$scope.selectedSubclient) {
                    $scope.errorText = "Please select a subclient";
                    return;
                }
                if (!$scope.clientId) {
                    $scope.errorText = "Please select a client";
                    return;
                }
                if (!$scope.restoreOptions.fsFileSourcePath || $scope.restoreOptions.fsFileSourcePath.trim().length === 0) {
                    $scope.errorText = "Please provide a source path";
                    return;
                }
                if (!$scope.restoreOptions.fsRestoreOrigLocation) {
                    if (!$scope.restoreOptions.fsFileDestPath || $scope.restoreOptions.fsFileDestPath.trim().length === 0) {
                        $scope.errorText = "Please provide a destination path";
                        return;
                    }
                }
                if ($scope.restoreOptions.fsusername) {
                    if (!$scope.restoreOptions.fspassword || $scope.restoreOptions.fspassword.trim().length === 0) {
                        $scope.errorText = "Please provide impersonate user credentials";
                        return;
                    }
                }
                if ($scope.restoreOptions.fspassword) {
                    if (!$scope.restoreOptions.fsusername || $scope.restoreOptions.fsusername.trim().length === 0) {
                        $scope.errorText = "Please provide impersonate user credentials";
                        return;
                    }
                }

                var inPlace = $scope.restoreOptions.fsRestoreOrigLocation ? 1 : 0;

                var useImpersonation = 0;
                if ($scope.restoreOptions.fsusername.trim().length > 0 && $scope.restoreOptions.fspassword.trim().length > 0) {
                    useImpersonation = 1;
                }

                var fileOverwrite = $scope.restoreOptions.fsFileOverwrite ? 1 : 0;

                $scope.infoText = 'Please wait...';

                var restoreInfo = {
                    subclientId: $scope.selectedSubclient.subclientId,
                    applicationId: $scope.selectedApp.applicationId,
                    clientName: $scope.clientName,
                    backupsetId: $scope.selectedBackupset.backupsetId,
                    clientId: $scope.clientId,
                    subclientName: $scope.selectedSubclient.subclientName,
                    backupsetName: $scope.selectedBackupset.backupsetName,
                    inPlace: inPlace,
                    destPath: $scope.restoreOptions.fsFileDestPath,
                    sourcePath: $scope.restoreOptions.fsFileSourcePath,
                    useImpersonation: useImpersonation,
                    userName: $scope.restoreOptions.fsusername,
                    password: $scope.restoreOptions.fspassword,
                    overwriteFiles: fileOverwrite
                };

                restservice.runFsRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFsRestoreCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );

            };

            $scope.doActivityControl = function (clientId) {

                $scope.selectedClientId = clientId;
                $scope.onAjax = true;

                $scope.initialBackupState = null;
                $scope.initialRestoreState = null;
                $scope.infoText = '';
                $scope.errorText = '';

                $scope.onGetClientProperties = function (response) {
                    $scope.onAjax = false;
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        $scope.clientPropertiesResponse = responseJson;

                        angular.forEach($scope.clientPropertiesResponse.clientProperties[0].clientProps.clientActivityControl.activityControlOptions, function (control, cIndex) {
                            if (control.activityType === 1) {
                                $scope.initialBackupState = control.enableActivityType;
                                $scope.enabledBackup = control.enableActivityType;
								$scope.enableAfterADelayBackup = control.enableAfterADelay;
								$scope.enableAfterDateTimeBackup = control.dateTime;
                            }
                            if (control.activityType === 2) {
                                $scope.initialRestoreState = control.enableActivityType;
                                $scope.enabledRestore = control.enableActivityType;
								$scope.enableAfterADelayRestore = control.enableAfterADelay;
								$scope.enableAfterDateTimeRestore = control.dateTime;
                            }

                        });

                        $j_commvault('#activityModal').modal({
                            keyboard: false,
                            backdrop: 'static'
                        });
                        $j_commvault('#activityModal').modal('show');
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not fetch client properties. Something went wrong');
                    }

                };

                restservice.getClientProperties(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, clientId).then($scope.onGetClientProperties,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );

            };

            $scope.onSetActivityControlBackup = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    var acresponse = responseJson;
                    var clientName = acresponse.response[0].entity.clientName;
                    toasterservice.showInfoToast('Activity control', 'Data backup ' + ($scope.enabledBackup ? 'enabled' : 'disabled') + ' for ' + clientName);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                }

            };

            $scope.onSetActivityControlRestore = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    var acresponse = responseJson;
                    var clientName = acresponse.response[0].entity.clientName;
                    toasterservice.showInfoToast('Activity control', 'Data restore ' + ($scope.enabledRestore ? 'enabled' : 'disabled') + ' for ' + clientName);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                }

            };

            var getCommservTimezoneForDisableTimer = function (activityInfo) {
                var deferred = $q.defer();
                if (activityInfo.enableActivityType) {
                    deferred.resolve({});
                } else {
					deferred.resolve({
						commservTimezone: $rootScope.cvCommon.csTimeZone.TimeZoneID
					});
                }
                return deferred.promise;
            };

            $scope.saveActivitySettings = function () {
                var delayHours = 24;
                if ($scope.initialBackupState != $scope.enabledBackup) {

                    var selectedClientBackup = $scope.selectedClientId;

                    var activityInfoBackup = {
                        activityType: 1,
                        enableAfterADelay: 0,
                        enableActivityType: $scope.enabledBackup,
                        dateTime: {}
                    };

                    getCommservTimezoneForDisableTimer(activityInfoBackup).then(
                        function (response) {

                            if (response.commservTimezone) {
                                activityInfoBackup.enableAfterADelay = 1;

                                var expectedTime = new Date();
                                expectedTime.setSeconds(0);
                                expectedTime.setHours(expectedTime.getHours() + delayHours);

                                var dateTime = {
                                    TimeZoneID: "" == response.commservTimezone || "0" == response.commservTimezone || !response.commservTimezone ? 31 : response.commservTimezone,
                                    time: expectedTime > 0 ? Math.floor(expectedTime.getTime() / 1000) : 0
                                };

                                activityInfoBackup.dateTime = dateTime;
                            }

                            restservice.setActivityControl(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, selectedClientBackup, activityInfoBackup).then($scope.onSetActivityControlBackup,
                                function () {
                                    toasterservice.showErrorToast('API Error', 'Something went wrong');
                                }
                            );
                        },
                        function (error) {
                            toasterservice.showErrorToast('API Error', error);
                        });

                }
                if ($scope.initialRestoreState != $scope.enabledRestore) {

                    var selectedClientRestore = $scope.selectedClientId;

                    var activityInfoRestore = {
                        activityType: 2,
                        enableAfterADelay: 0,
                        enableActivityType: $scope.enabledRestore,
                        dateTime: {}
                    };

                    getCommservTimezoneForDisableTimer(activityInfoRestore).then(
                        function (response) {

                            if (response.commservTimezone) {
                                activityInfoRestore.enableAfterADelay = 1;

                                var expectedTime = new Date();
                                expectedTime.setSeconds(0);
                                expectedTime.setHours(expectedTime.getHours() + delayHours);

                                var dateTime = {
                                    TimeZoneID: "" == response.commservTimezone || "0" == response.commservTimezone || !response.commservTimezone ? 31 : response.commservTimezone,
                                    time: expectedTime > 0 ? Math.floor(expectedTime.getTime() / 1000) : 0
                                };

                                activityInfoRestore.dateTime = dateTime;
                            }

                            restservice.setActivityControl(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, selectedClientRestore, activityInfoRestore).then($scope.onSetActivityControlRestore,
                                function () {
                                    toasterservice.showErrorToast('API Error', 'Something went wrong');
                                }
                            );
                        },
                        function (error) {
                            toasterservice.showErrorToast('API Error', error);
                        });

                }
                $j_commvault('#activityModal').modal('hide');
            };
			
			/*-------------------------------------------------------------------------------------------------------------------*/
			
			$j_commvault('#addServerModal').on('hidden.bs.modal', function (e) {
                
            });
			
			$scope.includeVmCheckBoxChange = function () {
				$scope.onAjax = true;
				$scope.getClients();
			};
			
			/*$scope.addServerModel = {
				errorText: '',
				infoText: '',
				osType: 'windows',
				agents: [],
				selectedAgents: [],
				installTypes: [{
					label: 'Select this method to install software packages on your computer.',
					value: 1,
					name: 'PUSH_INSTALL',
					selected: true
				}, {
					label: 'Select this method to complete the installation if software packages are already installed on your computer.',
					value: 2,
					name: 'DOCK_INSTALL',
					selected: false
				}]
			};*/
			
			/*$scope.addServerModel.selectedInstallType = $scope.addServerModel.installTypes[0];*/
			
			$scope.selectInstallSoftwareType = function (installType) {
				for (var i=0;i<$scope.addServerModel.installTypes.length;i++) {
					$scope.addServerModel.installTypes[i].selected = false;
				}
				installType.selected = true;
				$scope.addServerModel.selectedInstallType = installType;
				$scope.addServerModel.errorText = '';
				$scope.addServerModel.infoText = '';
			};
			
			var populatePackagesDropdown = function () {
				var packages = restservice.getPackages();
				var factory = {};
				factory.windowsPackages = [];
				factory.unixPackages = [];
				if (angular.isArray(packages)) {
					packages.forEach(function(packageObj) {
						if (packageObj.osType.toUpperCase() == "WINDOWS") {
							factory.windowsPackages.push(packageObj);
						} else if (packageObj.osType.toUpperCase() == "UNIX") {
							factory.unixPackages.push(packageObj);
						}
					});
				}
				
				$scope.addServerModel.selectedAgents = [];
				$scope.addServerModel.agents = ($scope.addServerModel.osType.toUpperCase() === "UNIX") ? factory.unixPackages : factory.windowsPackages;
			};
			
			$scope.addServerOsTypeChange = function () {
				populatePackagesDropdown();
			};
			
			$scope.showAddServerModal = function () {	
				$scope.addServerModel = {
					errorText: '',
					infoText: '',
					osType: 'Windows',
					agents: [],
					selectedAgents: [],
					hostnames: '',
					pushInstallUsername: '',
					pushInstallPassword: '',
					dockServerName: '',
					dockHostname: '',
					commCellId: $rootScope.cvCommon.commcell.commCellId,
					onSubmitCall: false,
					installTypes: [{
						label: 'Select this method to install software packages on your computer.',
						value: 1,
						name: 'PUSH_INSTALL',
						selected: true
					}, {
						label: 'Select this method to complete the installation if software packages are already installed on your computer.',
						value: 2,
						name: 'DOCK_INSTALL',
						selected: false
					}]
				};
				$scope.addServerModel.selectedInstallType = $scope.addServerModel.installTypes[0];
				populatePackagesDropdown();
				$j_commvault('#addServerModal').modal({
					keyboard: false,
					backdrop: 'static'
				});
				$j_commvault('#addServerModal').modal('show');
			};
			
			$scope.onSendInstallSoftwareRequest = function (response) {
				var responseJson = response.data.result;

                if (responseJson.cvStatusCode === 200) {
                    toasterservice.showInfoToast('Install software', 'Install software job started with Job Id: ' + responseJson.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run install software job. Something went wrong');
                }
				
				$scope.addServerModel.onSubmitCall = false;
                $scope.infoText = '';
                $j_commvault('#addServerModal').modal('hide');
			};
			
			$scope.doInstallSoftware = function () {
				var addServerModelToSend = $scope.addServerModel;
				
				$scope.addServerModel.errorText = '';
				$scope.addServerModel.infoText = '';
				
				if(addServerModelToSend.selectedInstallType.value == 1) {
					//PUSH_INSTALL
					if(addServerModelToSend.hostnames.trim().length === 0) {
						$scope.addServerModel.errorText = 'Please provide host name';
						return;
					}
					
					if(addServerModelToSend.pushInstallUsername.trim().length === 0 || addServerModelToSend.pushInstallPassword.trim().length === 0) {
						$scope.addServerModel.errorText = 'Please provide credentials';
						return;
					}
					
					if(addServerModelToSend.osType.trim().length === 0) {
						$scope.addServerModel.errorText = 'Please choose an operating sytem type';
						return;
					}
					
					if(addServerModelToSend.osType.toUpperCase() != "WINDOWS" && addServerModelToSend.osType.toUpperCase() != "UNIX") {
						$scope.addServerModel.errorText = 'Please choose a valid operating sytem type';
						return;
					}
					
					if(addServerModelToSend.selectedAgents.length === 0) {
						$scope.addServerModel.errorText = 'Please choose at least one agent to install';
						return;
					}
					
					
				} else if(addServerModelToSend.selectedInstallType.value == 2) {
					//DOCK_INSTALL
					if(addServerModelToSend.dockServerName.trim().length === 0)  {
						$scope.addServerModel.errorText = 'Please provide a server name';
						return;
					}
					
					if(addServerModelToSend.dockHostname.trim().length === 0)  {
						$scope.addServerModel.errorText = 'Please provide a host name';
						return;
					}
					
				}
				
				$scope.addServerModel.errorText = '';
				$scope.addServerModel.infoText = 'Please wait..';
				$scope.addServerModel.onSubmitCall = true;
				
				if(addServerModelToSend.selectedInstallType.value == 1) {
					restservice.sendPushInstallSoftwareRequest(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, $scope.addServerModel).then($scope.onSendInstallSoftwareRequest,
						function () {
							toasterservice.showErrorToast('API Error', 'Something went wrong');
						}
					);
				} else if(addServerModelToSend.selectedInstallType.value == 2) {
					restservice.sendDockInstallSoftwareRequest(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, $scope.addServerModel).then($scope.onSendInstallSoftwareRequest,
						function () {
							toasterservice.showErrorToast('API Error', 'Something went wrong');
						}
					);
				}
			};
			
			/*-------------------------------------------------------------------------------------------------------------------*/

            /*********************************************************************************/

            $scope.getVMDetails = function (vmguid, callback) {
                restservice.getVMDetails(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, vmguid).then(callback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.runBackupVmCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");
                var responseJson = response.data.result;

                //$scope.infoText = '';
                //$scope.errorText = '';
                //$j_commvault('#backupModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runBackupResponse = responseJson;
                    toasterservice.showInfoToast('Backup', 'Vm backup started with Job Id: ' + $scope.runBackupResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run backup. Something went wrong');
                }

                console.log($scope.runBackupResponse);
            };

            $scope.doFullVMBackup = function (clientProperty) {
                var onGetVMDetails = function (response) {
                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        console.log(responseJson);

                        var vmInfo = responseJson.vmStatusInfoList[0];

                        var backupInfo = {
                            vmGuid: vmInfo.strGUID,
                            subclientId: vmInfo.subclientId,
                            backupLevel: 'INCREMENTAL'
                        };

                        restservice.runBackupVm(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, backupInfo).then($scope.runBackupVmCallback,
                            function () {
                                toasterservice.showErrorToast('API Error', 'Something went wrong');
                            }
                        );

                    } else if (responseJson.cvStatusCode === 401) {
                        $scope.cvLogin.unauthorized = true;
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                    }
                };
                $scope.getVMDetails(clientProperty.client.clientEntity.clientGUID, onGetVMDetails);
            };

            $scope.runFullVmRestoreCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;

                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#restoreModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runFullVmRestoreResponse = responseJson;
                    toasterservice.showInfoToast('Full VM Restore', 'Vm restore started with Job Id: ' + $scope.runFullVmRestoreResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not run restore. Something went wrong');
                }

                console.log($scope.runFullVmRestoreResponse);
            };
			
			var getInstancePropertiesForClient = function(clientId) {
				var deferred = $q.defer();
				
				restservice.getInstancePropertiesForClient(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, clientId).then(
					function(response) {
						var responseJson = response.data.result;

						if (responseJson.cvStatusCode === 200) {
							deferred.resolve(responseJson);
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							deferred.reject('Could not get instance properties for client');
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not get instance properties for client. Something went wrong');
							deferred.reject('Could not get instance properties for client');
						}
					},
					function() {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
						deferred.reject('Could not get instance properties for client');
                    }
				);
				
				return deferred.promise;
			};
			
			var getAdvancedRestoreOptions = function (subclientId, applicationId) {
				var deferred = $q.defer();
				
				restservice.doBrowse(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, subclientId, applicationId, "\\").then(
					function(response) {
						var responseJson = response.data.result;

						if (responseJson.cvStatusCode === 200) {
							deferred.resolve(responseJson);
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							deferred.reject('Could not get advanced restore options');
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not get advanced restore options. Something went wrong');
							deferred.reject('Could not get advanced restore options');
						}
					},
					function() {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
						deferred.reject('Could not get advanced restore options');
                    }
				);
				
				return deferred.promise;
			};
				
			var getDiskInfo = function (subclientId, applicationId, browsePath) {
				var deferred = $q.defer();

				restservice.doBrowse(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, subclientId, applicationId, browsePath).then(
					function(response) {
						var responseJson = response.data.result;

						if (responseJson.cvStatusCode === 200) {
							deferred.resolve(responseJson);
						} else if (responseJson.cvStatusCode === 401) {
							//toasterservice.showInfoToast('Commvault login', 'User is logged out');
							//$scope.showLoginModal();
							$scope.cvLogin.unauthorized = true;
							deferred.reject('Could not get disk info');
							//$scope.cvLogin = {};
						} else {
							toasterservice.showErrorToast('Commvault error', 'Could not get disk info. Something went wrong');
							deferred.reject('Could not get disk info');
						}
					},
					function() {
						toasterservice.showErrorToast('API Error', 'Something went wrong');
						deferred.reject('Could not get disk info');
					}
				);	

				return deferred.promise;
			};

            $scope.onFullVmRestore = function () {
                $scope.errorText = '';
                $scope.infoText = '';
                if (($scope.newName === $scope.selectedVmForFullRestore.name) && ($scope.vmOverwrite === false)) {
                    $scope.errorText = 'Select overwrite option if the new vm name is same as the old name';
                    return;
                }
                if ($scope.newName.trim().length === 0) {
                    $scope.errorText = 'Please specify a name for the vm';
                    return;
                }
                if (!$scope.selectedVmForFullRestore) {
                    $scope.errorText = 'Please select a vm';
                    return;
                }

                $scope.unconditionalOverwrite = $scope.vmOverwrite ? 1 : 0;
                $scope.powerOnVmAfterRestore = $scope.vmPowerOn ? 1 : 0;

                $scope.infoText = 'Please wait...';

                var restoreInfo = {
                    newName: $scope.newName,
                    unconditionalOverwrite: $scope.unconditionalOverwrite,
                    powerOnVmAfterRestore: $scope.powerOnVmAfterRestore,
                    destClientId: $scope.selectedVmForFullRestore.proxyClient.clientId,
                    destClientName: $scope.selectedVmForFullRestore.proxyClient.clientName,
                    subclientId: $scope.selectedVmForFullRestore.subclientId,
                    vmGuid: $scope.selectedVmForFullRestore.strGUID,
                    vmName: $scope.selectedVmForFullRestore.name
                };
				
				restoreInfo.disks = [];
				
				/*********************Full VM Restore Fix******************************************************************/
				
				$scope.infoText = '';
				$scope.errorText = '';
				$j_commvault('#restoreModal').modal('hide');

				toasterservice.showInfoToast('Full VM Restore', 'Sending restore request');
				
				//get instance properties
				getInstancePropertiesForClient($scope.selectedVmForFullRestore.pseudoClient.clientId).then(
					function(responseJson) {
						
						if(angular.isArray(responseJson.instanceProperties)) {
							
							if(angular.isDefined(responseJson.instanceProperties[0].virtualServerInstance) && angular.isDefined(responseJson.instanceProperties[0].virtualServerInstance.vmwareVendor) && angular.isDefined(responseJson.instanceProperties[0].virtualServerInstance.vmwareVendor.virtualCenter)) {
								
								restoreInfo.diskUsername = responseJson.instanceProperties[0].virtualServerInstance.vmwareVendor.virtualCenter.userName;
								
							}
							
							if(angular.isDefined(responseJson.instanceProperties[0].instance)) {
							   
								restoreInfo.instanceId = responseJson.instanceProperties[0].instance.instanceId; 
								restoreInfo.applicationId = responseJson.instanceProperties[0].instance.applicationId;	   
							    restoreInfo.vClientId = responseJson.instanceProperties[0].instance.clientId;
							}

							return getAdvancedRestoreOptions(restoreInfo.subclientId, restoreInfo.applicationId);
						} else {
							return null;
						}
						
					},
					function(error) {
						toasterservice.showErrorToast('API Error', error);
					}
				).then (
					function(responseJson) {
						if(angular.isDefined(responseJson)) {
							var browseData = responseJson.browseResponses;
							
							browseData.forEach(function(b) {
								if(b.browseResult && b.browseResult.dataResultSet && b.browseResult.dataResultSet.length > 0) {
									b.browseResult.dataResultSet.forEach(function(dataResult) {
										if(dataResult.name && dataResult.name.toLowerCase() == restoreInfo.vmGuid.toLowerCase()) {
											restoreInfo.browsePathForVm = dataResult.path;
											restoreInfo.vmGuidFromBrowse = dataResult.name;
											if(dataResult.advancedData) {
												if(dataResult.advancedData.sourceCommServer) {
													restoreInfo.commcellId = dataResult.advancedData.sourceCommServer.commCellId;
												}
												if(dataResult.advancedData.browseMetaData && dataResult.advancedData.browseMetaData.virtualServerMetaData) {
													restoreInfo.esxHost = dataResult.advancedData.browseMetaData.virtualServerMetaData.esxHost;
													restoreInfo.folderPah = dataResult.advancedData.browseMetaData.virtualServerMetaData.inventoryPath;
													restoreInfo.resourcePoolPath = dataResult.advancedData.browseMetaData.virtualServerMetaData.resourcePoolPath ? dataResult.advancedData.browseMetaData.virtualServerMetaData.resourcePoolPath : "/";
													restoreInfo.datastore = dataResult.advancedData.browseMetaData.virtualServerMetaData.datastore;
													
												}
											}
										}
									});
								}
							});
							
							return getDiskInfo(restoreInfo.subclientId, restoreInfo.applicationId, restoreInfo.browsePathForVm);
							
						} else {
							return null;
						}
					},
					function(error) {
						toasterservice.showErrorToast('API Error', error);
					}
				).then (
					function(responseJson) {
						if(angular.isDefined(responseJson)) {
							var diskBrowseData = responseJson.browseResponses;
							
							diskBrowseData.forEach(function(b) {
								if(b.browseResult && b.browseResult.dataResultSet && b.browseResult.dataResultSet.length > 0) {
									b.browseResult.dataResultSet.forEach(function(dataResult) {
										if(dataResult.name && dataResult.name.toLowerCase().endsWith('vmdk')) {
											var datastore = "";
											if(dataResult.advancedData && dataResult.advancedData.browseMetaData && dataResult.advancedData.browseMetaData.virtualServerMetaData) {
												datastore = dataResult.advancedData.browseMetaData.virtualServerMetaData.datastore;
											}
											restoreInfo.disks.push({
												diskName : dataResult.name,
												dataStore : datastore
											});
										}
									});
								}
							});
							
							restservice.runFullVmRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFullVmRestoreCallback,
								function () {
									toasterservice.showErrorToast('API Error', 'Something went wrong');
								}
							);
							
							
							
						} else {
							return null;
						}
					},
					function(error) {
						toasterservice.showErrorToast('API Error', error);
					}
				);
				
				
				
				
				/*********************Full VM Restore Fix End**************************************************************/
				

                /*restservice.runFullVmRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFullVmRestoreCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );*/
            };

            $scope.showFullVmRestoreModal = function (clientProperty) {
                var onGetVMDetailsForRestore = function (response) {
                    $scope.onAjax = false;
                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        console.log(responseJson);

                        $scope.selectedVmForFullRestore = responseJson.vmStatusInfoList[0];
                        $scope.vmOverwrite = true;
                        $scope.vmPowerOn = true;
                        $scope.newName = $scope.selectedVmForFullRestore.name;

                        $scope.errorText = '';
                        $scope.infoText = '';
                        $j_commvault('#restoreModal').modal({
                            keyboard: false,
                            backdrop: 'static'
                        });
                        $j_commvault('#restoreModal').modal('show');

                    } else if (responseJson.cvStatusCode === 401) {
                        $scope.cvLogin.unauthorized = true;
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                    }
                };
                $scope.onAjax = true;
                $scope.getVMDetails(clientProperty.client.clientEntity.clientGUID, onGetVMDetailsForRestore);
            };

            $scope.runFileLevelVmRestoreCallback = function (response) {
                //var answer = response.responseXML.documentElement.getAttribute("answer");

                var responseJson = response.data.result;
                $scope.infoText = '';
                $scope.errorText = '';
                $j_commvault('#flvmrestoreModal').modal('hide');

                if (responseJson.cvStatusCode === 200) {
                    $scope.runFileLevelVmRestoreResponse = responseJson;
                    toasterservice.showInfoToast('File level VM Restore', 'Restore started with Job Id: ' + $scope.runFileLevelVmRestoreResponse.jobIds[0]);
                } else if (responseJson.cvStatusCode === 401) {
                    //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                    //$scope.showLoginModal();
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                } else {
                    toasterservice.showErrorToast('Commvault error', 'Could not restore. Something went wrong');
                }

                console.log($scope.runFileLevelVmRestoreResponse);
            };

            $scope.onFileLevelVmRestore = function () {
                if (!$scope.vmusername || !$scope.vmpassword || $scope.vmusername.trim().length === 0 || $scope.vmpassword.trim().length === 0) {
                    $scope.errorText = 'Please provide guest vm credentials';
                    return;
                }
                if (!$scope.vmFileSourcePath || $scope.vmFileSourcePath.trim().length === 0) {
                    $scope.errorText = 'Please provide source file path to restore';
                    return;
                }
                if (!$scope.vmFileDestPath || $scope.vmFileDestPath.trim().length === 0) {
                    $scope.errorText = 'Please provide destination file path';
                    return;
                }
                if (!$scope.selectedVmForFileLevelRestore) {
                    $scope.errorText = 'Please select a vm to restore';
                    return;
                }

                var overwriteFiles = $scope.vmFileOverwrite ? 1 : 0;
                var sourcePath = "\\" + $scope.selectedVmForFileLevelRestore.strGUID.toLowerCase() + "\\" + $scope.vmFileSourcePath;
                var destPath = $scope.vmFileDestPath;

                $scope.errorText = '';
                $scope.infoText = 'Please wait...';

                var restoreInfo = {
                    subclientId: $scope.selectedVmForFileLevelRestore.subclientId,
                    destPath: destPath,
                    destClientId: $scope.selectedVmForFileLevelRestore.proxyClient.clientId,
                    destClientName: $scope.selectedVmForFileLevelRestore.proxyClient.clientName,
                    serverName: $scope.selectedVmForFileLevelRestore.pseudoClient.clientName,
                    vmGuid: $scope.selectedVmForFileLevelRestore.strGUID.toLowerCase(),
                    vmUsername: $scope.vmusername,
                    vmPassword: $scope.vmpassword,
                    sourcePath: sourcePath,
                    overwriteFiles: overwriteFiles
                };

                restservice.runFileLevelVmRestore(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, restoreInfo).then($scope.runFileLevelVmRestoreCallback,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

            $scope.showFileLevelRestoreModal = function (clientProperty) {
                var onGetVMDetailsForFileLevelRestore = function (response) {
                    $scope.onAjax = false;
                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200) {
                        console.log(responseJson);

                        $scope.errorText = '';
                        $scope.infoText = '';
                        $scope.selectedVmForFileLevelRestore = responseJson.vmStatusInfoList[0];
                        $j_commvault('#flvmrestoreModal').modal({
                            keyboard: false,
                            backdrop: 'static'
                        });
                        $j_commvault('#flvmrestoreModal').modal('show');

                    } else if (responseJson.cvStatusCode === 401) {
                        $scope.cvLogin.unauthorized = true;
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                    }
                };

                $scope.onAjax = true;
                $scope.getVMDetails(clientProperty.client.clientEntity.clientGUID, onGetVMDetailsForFileLevelRestore);
            };

            $j_commvault('#flvmrestoreModal').on('hidden.bs.modal', function (e) {
                $scope.errorText = '';
                $scope.infoText = '';
                $scope.vmusername = '';
                $scope.vmpassword = '';
                $scope.vmFileOverwrite = '';
                $scope.vmFileSourcePath = '';
                $scope.vmFileDestPath = '';
                $scope.selectedVmForFileLevelRestore = null;
                $scope.$apply();
            });

            /*********************************************************************************/
			
			
			
			/******        Send log      *****************************************************/
			
			$scope.showSendLogsModal = function (client) {
				$scope.selectedClientForSendLogs = client;
				$scope.sendLogsModel.emailSubject = "Logs for client " + client.clientEntity.displayName;
                $j_commvault('#sendLogsModal').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
                $j_commvault('#sendLogsModal').modal('show');
			};
			
			$scope.onSendLogsSubmit = function () {
				var selectedClientForSendLogs = $scope.selectedClientForSendLogs;
				
				$scope.sendLogsModel.errorText = '';
				$scope.sendLogsModel.infoText = '';
				
				if($scope.sendLogsModel.autoUpload === false && $scope.sendLogsModel.outputTo === false) {
					$scope.sendLogsModel.errorText = 'Please select either auto upload or output to path';
					return;
				}
				
				if($scope.sendLogsModel.outputTo === true) {
					if($scope.sendLogsModel.pathSelectionRadio != 'localPath' && $scope.sendLogsModel.pathSelectionRadio != 'networkPath') {
						$scope.sendLogsModel.errorText = 'Please specify a local path or network path';
						return;
					}
					
					if($scope.sendLogsModel.pathSelectionRadio == 'localPath') {
						if(!$scope.sendLogsModel.localPath || $scope.sendLogsModel.localPath.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify a local path';
							return;
						} 
					}
					
					if($scope.sendLogsModel.pathSelectionRadio == 'networkPath') {
						if(!$scope.sendLogsModel.networkPath || $scope.sendLogsModel.networkPath.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify a network path';
							return;
						}
						if(!$scope.sendLogsModel.networkUserName || $scope.sendLogsModel.networkUserName.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify network path credentials';
							return;
						}
						if(!$scope.sendLogsModel.networkPassword || $scope.sendLogsModel.networkPassword.trim().length === 0) {
							$scope.sendLogsModel.errorText = 'Please specify network path credentials';
							return;
						} 
					}
				}
				
				if($scope.sendLogsModel.notifyByEmail) {
					if((!$scope.sendLogsModel.userSelection || $scope.sendLogsModel.userSelection.trim().length === 0) && !$scope.sendLogsModel.isIncludeMe) {
						$scope.sendLogsModel.errorText = 'Please select users to notify';
						return;
					}
					
					if(!$scope.sendLogsModel.emailSubject || $scope.sendLogsModel.emailSubject.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide a subject to the email';
						return;
					}
					
				}
				
				if($scope.sendLogsModel.isTransactionLogsSelected == true) {
					if($scope.sendLogsModel.transactionRangeFrom.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide job Id range';
						return;
					}
					if($scope.sendLogsModel.transactionRangeTo.trim().length === 0) {
						$scope.sendLogsModel.errorText = 'Please provide job Id range';
						return;
					}
					if(!Number.isInteger(+$scope.sendLogsModel.transactionRangeFrom) || !Number.isInteger(+$scope.sendLogsModel.transactionRangeTo)) {
						$scope.sendLogsModel.errorText = 'Please provide valid job Id range';
						return;
					}
				}
				
				$scope.sendLogsModel.errorText = '';
				$scope.sendLogsModel.infoText = 'Please wait...';
				
				var onSendLogFiles = function(response) {
					var responseJson = response.data.result;
					
					$j_commvault('#sendLogsModal').modal('hide');
					
                    if (responseJson.cvStatusCode === 200) {
						toasterservice.showInfoToast('Send log files', 'Job started with Job Id: ' + responseJson.jobIds[0]);
                    } else if (responseJson.cvStatusCode === 401) {
                        //toasterservice.showInfoToast('Commvault login', 'User is logged out');
                        //$scope.showLoginModal();
                        $scope.cvLogin.unauthorized = true;
                        //$scope.cvLogin = {};
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Could not submit send logs request. Something went wrong');
                    }
				};
				
				restservice.sendLogFilesForClient(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint, selectedClientForSendLogs, $scope.sendLogsModel).then(onSendLogFiles,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
				
				
			};
			
			$j_commvault('#sendLogsModal').on('hidden.bs.modal', function (e) {
                $scope.sendLogsModel = {
					 autoUpload: false,
					 outputTo: false,
					 pathSelectionRadio: 'localPath',
					 localPath: '',
					 networkPath: '',
					 isCommservDbLogSelected: false,
					 isLatestDbLogSelected: false,
					 isLogsSelected: true,
					 isDbLogsSelected: false,
					 isMachineConfigSelected: true,
					 isOsLogsSelected: true,
					 isProcessDumpSelected: true,
					 isJobResultsSelected: false,
					 isIndexLogSelected: false,
					 isTransactionLogsSelected: false,
					 transactionRangeFrom: '',
					 transactionRangeTo: '',	
					 notifyByEmail: false,
					 userSelection: '',
					 isIncludeMe: true,
					 isAttachLogs: false,
					 emailSubject: '',
					 problemDescription: '',
					 userImpersonate: false,
					 networkUserName: '',
					 networkPassword: ''
				};
                $scope.$apply();
            });
			
			 $scope.sendLogsModel = {
				 autoUpload: false,
				 outputTo: false,
				 pathSelectionRadio: 'localPath',
				 localPath: '',
				 networkPath: '',
				 isCommservDbLogSelected: false,
				 isLatestDbLogSelected: false,
				 isLogsSelected: true,
				 isDbLogsSelected: false,
				 isMachineConfigSelected: true,
				 isOsLogsSelected: true,
				 isProcessDumpSelected: true,
				 isJobResultsSelected: false,
				 isIndexLogSelected: false,
				 isTransactionLogsSelected: false,
				 transactionRangeFrom: '',
				 transactionRangeTo: '',	
				 notifyByEmail: false,
				 userSelection: '',
				 isIncludeMe: true,
				 isAttachLogs: false,
				 emailSubject: '',
				 problemDescription: '',
				 userImpersonate: false,
				 networkUserName: '',
				 networkPassword: ''
			};
			
			$scope.localPathRadioChange = function() {
				$scope.sendLogsModel.localPath = '';
				$scope.sendLogsModel.networkPath = '';
				$scope.sendLogsModel.networkUserName = '';
				$scope.sendLogsModel.networkPassword = '';
			};
			
			$scope.networkPathRadioChange = function() {
				$scope.sendLogsModel.localPath = '';
				$scope.sendLogsModel.networkPath = '';
				$scope.sendLogsModel.networkUserName = '';
				$scope.sendLogsModel.networkPassword = '';
			};
			
			/******        Send log end      *****************************************************/

            $scope.sort = function (keyname) {
                $scope.sortKey = keyname;
                $scope.reverse = !$scope.reverse;
            };

            $scope.toggleActionDropdown = function (clientProperty) {
                clientProperty.showActionDropdown = !clientProperty.showActionDropdown;
                if (clientProperty.showActionDropdown) {
                    if ($scope.openDropdownClientproperty) {
                        if ($scope.openDropdownClientproperty !== clientProperty) {
                            $scope.openDropdownClientproperty.showActionDropdown = false;
                        }
                    }
                    $scope.openDropdownClientproperty = clientProperty;
                }
            };

            window.onclick = function (event) {
                if (!event.target.matches('.action-dropbtn') && !event.target.matches('.action-dropbtn .button-icon')) {
                    if ($scope.openDropdownClientproperty) {
                        $scope.openDropdownClientproperty.showActionDropdown = false;
                        $scope.$apply();
                    }
                }
            };

            $scope.pageSizeList = [5, 10, 20, 50, 100];
            $scope.pageSize = $scope.pageSizeList[2];


			$scope.$on('loggedout', function(event, data) {
                $scope.cvLogin.unauthorized = true;
            });
            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.getCvCommonProperties();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);


    angular.module('angularapp').controller('OnboardingController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, toasterservice, restservice, utilFactory) {
            console.log('In Onboarding controller');

            $scope.obparams = {
                cvobusername: '',
                cvobpassword: '',
                cvobwebconsolename: '',
                cvobcompanyname: ''
            };

            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    //$scope.getSchedules();
                } else {
                    $scope.cvLogin.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);


    angular.module('angularapp').controller('LogoutController', [
        '$scope',
        '$cookies',
        'toasterservice',
        'restservice',
		'utilFactory',
        function ($scope, $cookies, toasterservice, restservice, utilFactory) {
            console.log('In logout controller');
            $scope.showHelp = false;

            $scope.doLogout = function () {
                $scope.onDoLogout = function (response) {
                    //var answer = response.responseXML.documentElement.getAttribute("answer");

                    var responseJson = response.data.result;

                    if (responseJson.cvStatusCode === 200 || responseJson.cvStatusCode === 401) {
                        $scope.cvLogin.token = '';
                        var expireDate = new Date();
                        expireDate.setDate(expireDate.getDate() + 7);

                        $cookies.putObject('snow_cvLogin', $scope.cvLogin, {
                            'expires': expireDate
                        });
                        $scope.showHelp = true;
                        $scope.helpInfo = "You have been logged out";
						utilFactory.stopStayLoggedInScheduler();
                    } else {
                        toasterservice.showErrorToast('Commvault error', 'Something went wrong');
                    }

                    $scope.onAjax = false;
                };

                $scope.onAjax = true;

                restservice.doLogout(window.g_ck, $scope.cvLogin.token, $scope.cvLogin.endpoint).then($scope.onDoLogout,
                    function () {
                        toasterservice.showErrorToast('API Error', 'Something went wrong');
                    }
                );
            };

			
            $scope.cvLogin = {};
            $scope.getLoginCookie = function () {
                $scope.cvLogin.unauthorized = true;
                try {
                    var cvLoginFromCookie = $cookies.getObject('snow_cvLogin');
                    if (cvLoginFromCookie) {
                        $scope.cvLogin = cvLoginFromCookie;
                        $scope.cvLogin.unauthorized = false;
                    }
                } catch (e) {
                    console.log('Failed to get cookie');
                }
                if ($scope.cvLogin.token && $scope.cvLogin.token.length > 0) {
                    $scope.doLogout();
                } else {
                    $scope.showHelp = true;
                    $scope.helpInfo = "You have been logged out";
                    //$scope.unauthorized = true;
                    //$scope.cvLogin = {};
                }
            };
        }
    ]);

    angular.module('angularapp').controller('AngularAppCtrl', function ($scope) {
        $scope.myVar = "This is the value of myVar";
        $scope.btnText = "Perform backup";

        $scope.callWorkflow = function () {
            console.log('Calling workflow');
            $scope.btnText = "Sending request";

            $scope.callback = function (response) {
                var answer = response.responseXML.documentElement.getAttribute("answer");
                $scope.btnText = "Perform backup";
                $scope.$apply();
                console.log(response);
                console.log(answer);
            };

            var getHelloAddr = new GlideAjax('TestCommvaultEndpoint');

            getHelloAddr.addParam('sysparm_name', 'getSchedules');

            getHelloAddr.getXML($scope.callback);
        };
    });

})();]]></script>
        <script_name>angular_app_client_lo</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-26 13:21:18</sys_created_on>
        <sys_id>c366ccd9db530300180ad170cf961957</sys_id>
        <sys_mod_count>582</sys_mod_count>
        <sys_name>x_183199_testcommv.angular_app_client_lo</sys_name>
        <sys_package display_value="TestCommvault" source="x_183199_testcommv">3aafe741db130300180ad170cf961919</sys_package>
        <sys_policy/>
        <sys_scope display_value="TestCommvault">3aafe741db130300180ad170cf961919</sys_scope>
        <sys_update_name>sys_ui_script_c366ccd9db530300180ad170cf961957</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-06-25 06:40:46</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
